//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.01.12 at 06:39:36 PM BRST 
//


package org.iso.mpeg.mpeg7._2004;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ViewDescriptionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ViewDescriptionType">
 *   &lt;complexContent>
 *     &lt;extension base="{urn:mpeg:mpeg7:schema:2004}ContentAbstractionType">
 *       &lt;choice>
 *         &lt;element name="View" type="{urn:mpeg:mpeg7:schema:2004}ViewType" maxOccurs="unbounded"/>
 *         &lt;element name="ViewSet" type="{urn:mpeg:mpeg7:schema:2004}ViewSetType" maxOccurs="unbounded"/>
 *         &lt;element name="ViewDecomposition" type="{urn:mpeg:mpeg7:schema:2004}ViewDecompositionType" maxOccurs="unbounded"/>
 *       &lt;/choice>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ViewDescriptionType", propOrder = {
    "view",
    "viewSet",
    "viewDecomposition"
})
public class ViewDescriptionType
    extends ContentAbstractionType
{

    @XmlElement(name = "View")
    protected List<ViewType> view;
    @XmlElement(name = "ViewSet")
    protected List<ViewSetType> viewSet;
    @XmlElement(name = "ViewDecomposition")
    protected List<ViewDecompositionType> viewDecomposition;

    /**
     * Gets the value of the view property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the view property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getView().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ViewType }
     * 
     * 
     */
    public List<ViewType> getView() {
        if (view == null) {
            view = new ArrayList<ViewType>();
        }
        return this.view;
    }

    /**
     * Gets the value of the viewSet property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the viewSet property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getViewSet().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ViewSetType }
     * 
     * 
     */
    public List<ViewSetType> getViewSet() {
        if (viewSet == null) {
            viewSet = new ArrayList<ViewSetType>();
        }
        return this.viewSet;
    }

    /**
     * Gets the value of the viewDecomposition property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the viewDecomposition property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getViewDecomposition().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ViewDecompositionType }
     * 
     * 
     */
    public List<ViewDecompositionType> getViewDecomposition() {
        if (viewDecomposition == null) {
            viewDecomposition = new ArrayList<ViewDecompositionType>();
        }
        return this.viewDecomposition;
    }

}
